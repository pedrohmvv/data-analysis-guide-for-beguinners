{
    "leitura_dados": "from pandas import read_csv\n\n# Ler primeiras 5 linhas\ndisplay(read_csv('data/cars_translated.csv', nrows=5))\n\ndf_cars = read_csv('data/cars_translated.csv', sep=';')\ndf_cars.head()",
    "descricao_dados": "\n# InformaÃ§Ãµes gerais\ndf_cars.info()\n\n# DescriÃ§Ã£o dados numÃ©ricos\ndf_cars.select_dtypes(include='number').describe()\n",
    "teste": "\nprint('Hello')\n\nlen([232,24])\n",
    "colunas": "\n# Colunas disponÃ­veis\ncolunas = df_cars.columns\nprint(f\"Colunas: {colunas}\")\n\n# Coluna Fabricante\nprint('Coluna Fabricante')\nprint(df_cars['fabricante'])\n\n# Colunas `fabricantes`, `tipo_gasolina`, `num_portas`, `tipo_carroceria`\ncolunas_para_mostrar = ['fabricante', 'tipo_combustivel', 'num_portas', 'tipo_carroceria']\ndf_cars[colunas_para_mostrar]\n",
    "limpeza_dados": "\n# Substituindo '?' por NaN\nfrom numpy import nan\ndf_cars.replace('?', nan, inplace=True) \n\n# Convertendo colunas para tipos apropriados\ncolunas = ['perdas_normalizadas', 'diametro_cilindro', 'curso_pistao', 'potencia', 'rpm_maximo', 'preco']\ndf_cars[colunas] = df_cars[colunas].replace(',','.').astype(float)\n",
    "problemas": "\n# Valores nulos\nprint(f\"Valores nulos por coluna: {df_cars.isna().sum()}\")\n\n# Valores inconsistentes\nprint(f\"Valores possivelmente mal formatados:\")\ndisplay(df_cars.select_dtypes(include='object').head(2))\n\nprint(f\"Valores inconsistentes:\")\ndisplay(df_cars[df_cars['perdas_normalizadas'] == '?'])\n",
    "problema": "\n# Valores nulos\nprint(f\"Valores nulos por coluna: {df_cars.isna().sum()}\")\n\n# Valores inconsistentes\nprint(f\"Valores possivelmente mal formatados:\")\ndisplay(df_cars.select_dtypes(include='object').head(2))\n\nprint(f\"Valores inconsistentes:\")\ndisplay(df_cars[df_cars['perdas_normalizadas'] == '?'])\n\n# Duplicatas\nprint(f\"Quantidade de duplicatas: {df_cars.duplicated().sum()}\")\n",
    "operacoes": "\n# Converter 'consumo' para 'km/l'\ndf_cars = df_cars.assign(\n    km_por_l_cidade = df_cars['consumo_cidade'] * 0.425144,\n    km_por_l_estrada = df_cars['consumo_estrada'] * 0.425144\n)\n\n# EstatÃ­sticas BÃ¡sicas de colunas numÃ©ricas\ncolunas_numericas = df_cars.select_dtypes(include='number').columns\nfor col in colunas_numericas:\n    print(f\"MÃ©dia {col}: {df_cars[col].mean():.2f}\")\n    print(f\"MÃ¡ximo {col}: {df_cars[col].max():.2f}\")\n    print(f\"MÃ­nimo {col}: {df_cars[col].min():.2f}\")\n    print(f\"Desvio PadrÃ£o {col}: {df_cars[col].std():.2f}\")\n    print(f\"Mediana {col}: {df_cars[col].median():.2f}\")\n\n# EstatÃ­sticas BÃ¡sicas de colunas categÃ³ricas\ncolunas_categoricas = df_cars.select_dtypes(include='object').columns\nfor col in colunas_categoricas:\n    print(f\"Contagem de Valores Ãšnicos {col}: {df_cars[col].nunique()}\")\n    print(f\"Valores Ãšnicos {col}: {df_cars[col].unique()}\")\n    print(f\"TOP 5 - Contagem de Valores {col}: {df_cars[col].value_counts().head(5)}\")\n",
    "filtragem": "# Filtragem (tipo_combustÃ­vel == gasolina) &  (potencia > 100 hp)\ndf_cars_mascara = df_cars[(df_cars['tipo_combustivel'] == 'gasolina') & (df_cars['potencia'] > 100)]\n# ou\ndf_cars_query = df_cars.query('`tipo_combustivel` == \"gasolina\" and potencia > 100')\n\nstring_filtro = f\"\"\"\nPotÃªncia MÃ­nima Filtrada: {df_cars_mascara['potencia'].min()}\nTipo de combustÃ­vel Ãšnicos: {df_cars_mascara['tipo_combustivel'].unique()}\n\"\"\"\n\nprint('DF Filtrado 1:')\nprint(string_filtro)\ndisplay(df_cars_mascara)\n\n# Filtragem (tipo_combustivel == diesel) & (tracao == quatro_rodas)\ndf_cars_mascara2 = df_cars[(df_cars['tipo_combustivel'] == 'diesel') & (df_cars['tracao'] == True)]\n\nstring_filtro2 = f\"\"\"\nTipo de TraÃ§Ã£o Ãšnicos: {df_cars_mascara2['tracao'].unique()}\nTipo de combustÃ­vel Ãšnicos: {df_cars_mascara2['tipo_combustivel'].unique()}\n\"\"\"\n\nprint('DF Filtrado 2:')\nprint(string_filtro2)\ndisplay(df_cars_mascara2)\n",
    "agrupamento": "\n\n# MÃ©dia de preÃ§o por combustÃ­vel\ndf_cars_preco_comb = df_cars.groupby('tipo_combustivel')['preco'].mean().to_frame().reset_index().sort_values(by='preco', ascending=False).head()\nprint('PreÃ§o MÃ©dio por CombustÃ­vel')\ndisplay(df_cars_preco_comb)\n\ndf_cars_mais_caros = df_cars.groupby('fabricante')['preco'].max().to_frame().reset_index().sort_values(by='preco', ascending=False).head()\nprint('PreÃ§o MÃ¡ximo por Marca')\ndisplay(df_cars_mais_caros)\n\ndf_cars_mais_caros_media = df_cars.groupby('fabricante')['preco'].mean().to_frame().reset_index().sort_values(by='preco', ascending=False).head()\nprint('Marcas mais caras em mÃ©dia')\ndisplay(df_cars_mais_caros_media)\n\ndf_cars_combustiveis_consumo = df_cars.groupby('tipo_combustivel')['consumo_cidade'].mean().to_frame().reset_index().sort_values(by='consumo_cidade', ascending=False).head()\nprint('Consumo MÃ©dio por CombustÃ­vel')\ndisplay(df_cars_combustiveis_consumo)\n\ndf_cars_modelos_marca = df_cars.groupby('fabricante').size().reset_index(name='quantidade').sort_values(by='quantidade', ascending=False)\nprint('Modelos por Marca')\ndisplay(df_cars_modelos_marca)\n",
    "exploratoria": "\nimport matplotlib.pyplot as plt\n# Criando 2 linhas e 3 colunas de subplots\nfig, ax = plt.subplots(figsize=(16, 10), ncols=3, nrows=2)\n\n# Resposta 1: PotÃªncia MÃ©dia por Fabricante\ndf_cars_marca_media_potencia = df_cars.groupby('fabricante')['potencia'].mean().reset_index().sort_values(by='potencia', ascending=False).head(5)\nmedia_geral = df_cars['potencia'].mean()\n# GrÃ¡fico de barras horizontal\nax[0, 0].barh(df_cars_marca_media_potencia['fabricante'][::-1], df_cars_marca_media_potencia['potencia'][::-1], color='skyblue')\nax[0, 0].axvline(media_geral, color='red', linestyle='--', label=f'MÃ©dia Geral ({media_geral:.2f})')\n# Detalhes\nax[0, 0].set_xlabel('PotÃªncia MÃ©dia')\nax[0, 0].set_ylabel('Fabricante')\nax[0, 0].set_title('PotÃªncia MÃ©dia por Fabricante')\nax[0, 0].legend()\n\n# Resposta 2: DispersÃ£o entre Peso e PreÃ§o\n# GrÃ¡fico de DispersÃ£o\nax[0, 1].scatter(df_cars['peso'], df_cars['preco'], color='blue', alpha=0.6)\n# Detalhes\nax[0, 1].set_xlabel('Peso')\nax[0, 1].set_ylabel('PreÃ§o')\nax[0, 1].set_title('DispersÃ£o entre Peso e PreÃ§o')\n\n# Resposta 3: Tipo de CombustÃ­vel\ndf_cars_tipo_combustivel = df_cars['tipo_combustivel'].value_counts().reset_index()\n# GrÃ¡fico de barras vertical\nax[0, 2].bar(df_cars_tipo_combustivel['tipo_combustivel'], df_cars_tipo_combustivel['count'], color='green')\n# Detalhes\nax[0, 2].set_xlabel('Tipo de CombustÃ­vel')\nax[0, 2].set_ylabel('Quantidade')\nax[0, 2].set_title('Tipo de CombustÃ­vel')\n\n# Resposta 4: DistribuiÃ§Ã£o de Carros por Cilindros\n# Histograma\nax[1, 0].hist(df_cars['num_cilindros'], bins=10, color='orange', alpha=0.6)\n# Detalhes\nax[1, 0].set_xlabel('Cilindros')\nax[1, 0].set_ylabel('Quantidade')\nax[1, 0].set_title('DistribuiÃ§Ã£o de Carros por Cilindros')\n\n# Resposta 5: PotÃªncia MÃ©dia por TraÃ§Ã£o\ndf_cars_tracao = df_cars.groupby('tracao')['potencia'].mean().reset_index()\n# GrÃ¡fico de barras vertical\nax[1, 1].bar(df_cars_tracao['tracao'], df_cars_tracao['potencia'], color='purple')\n# Detalhes\nax[1, 1].set_xlabel('TraÃ§Ã£o')\nax[1, 1].set_ylabel('PotÃªncia MÃ©dia')\nax[1, 1].set_title('PotÃªncia MÃ©dia por TraÃ§Ã£o')\n\n# Resposta 6: Consumo de CombustÃ­vel por NÃºmero de Marchas\n# GrÃ¡fico de DispersÃ£o\nax[1, 2].scatter(df_cars['tamanho_motor'], df_cars['consumo_cidade'], color='red', alpha=0.6)\n# Detalhes\nax[1, 2].set_xlabel('Tamanho do Motor')\nax[1, 2].set_ylabel('Consumo Cidade')\nax[1, 2].set_title('Consumo de CombustÃ­vel por Tamanho do Motor')\n\nplt.show()\n"
}